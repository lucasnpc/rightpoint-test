<!--
~ Copyright (C) 2019 The Android Open Source Project
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~      http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->

<resources>

    <!--Typography-->

    <!--Material’s type system supports 13 categories that, when combined, form the typescale. -->
    <!--This typescale is evident in the variety of text styles and sizes that appear on screen, -->
    <!--ranging from body copy to buttons. Type appears across the UI, in places such as in -->
    <!--components and on surfaces.-->

    <!--These styles should be used throughout your app when creating text views so all your -->
    <!--text is consistently styled and easily updated if design or product needs change. Each -->
    <!--style in the type scale can be customized by defining a style and overriding that -->
    <!--style's Material Theme attribute (?textAppearanceHeadline1, ?textAppearanceBody2, etc.) -->
    <!--in your app's theme. In this project, type attributes have already been overridden in -->
    <!--themes.xml and are set to the styles in this file, type.xml. These ?textAppearance* -->
    <!--theme attributes should be used in your layouts to set a TextView’s appearance instead -->
    <!--of fully qualified style references and in favor of manually setting text properties.-->

    <!--Type on Android is themed by defining a custom TextAppearance for each type scale style. -->
    <!--Use standard TextAppearance attributes such as textSize, textColor, fontFamily, -->
    <!--letterSpacing, etc. to define a custom appearance for each and see how they are -->
    <!--applied globally across your app.-->

    <style name="TextAppearance.WhatsWrong.Headline1" parent="TextAppearance.MaterialComponents.Headline1">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Headline2" parent="TextAppearance.MaterialComponents.Headline2">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Headline3" parent="TextAppearance.MaterialComponents.Headline3">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Headline4" parent="TextAppearance.MaterialComponents.Headline4">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Headline5" parent="TextAppearance.MaterialComponents.Headline5">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Headline6" parent="TextAppearance.MaterialComponents.Headline6">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Subtitle1" parent="TextAppearance.MaterialComponents.Subtitle1">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Subtitle2" parent="TextAppearance.MaterialComponents.Subtitle2">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Body1" parent="TextAppearance.MaterialComponents.Body1">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Body2" parent="TextAppearance.MaterialComponents.Body2">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Button" parent="TextAppearance.MaterialComponents.Button">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Caption" parent="TextAppearance.MaterialComponents.Caption">
        <!--Your custom type style here-->
    </style>

    <style name="TextAppearance.WhatsWrong.Overline" parent="TextAppearance.MaterialComponents.Overline">
        <!--Your custom type style here-->
    </style>

    <!--
        To build consistent typography styles throughout the app use the type scale defined in the
        Material Design spec.
        See: https://material.io/design/typography/the-type-system.html#type-scale.

        For reference, these are the styles when reference in XML:
        * ?attr/textAppearanceHeadline1
        * ?attr/textAppearanceHeadline2
        * ?attr/textAppearanceHeadline3
        * ?attr/textAppearanceHeadline4
        * ?attr/textAppearanceHeadline5
        * ?attr/textAppearanceHeadline6
        * ?attr/textAppearanceSubtitle1
        * ?attr/textAppearanceSubtitle2
        * ?attr/textAppearanceBody1
        * ?attr/textAppearanceBody2
        * ?attr/textAppearanceButton
        * ?attr/textAppearanceCaption
        * ?attr/textAppearanceOverline

        These default styles can be overridden in the app theme to fit the design of the application.
        Try to make sure the application designers adhere to this type scale in their comps.

        All text appearance styles should be used through android:textAppearance attribute.

        To define additional text styles, the naming and hierarchy format should be the following:

            TextAppearance.[Color].[Size].[*FamilyItem].[*Style].[*Options]

            * Indicates optional

            - Color:        Text Color (e.g. DarkPrimary, DarkTertiary)
            - Size:         Text Size
            - FamilyItem:   Font FamilyItem (e.g. Condensed, Medium)
            - Style:        Text Style (e.g. Bold, Italic)
            - Options:      Any other styles (e.g. AllCaps)
    -->

</resources>
